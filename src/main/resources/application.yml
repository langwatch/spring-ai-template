spring:
  application:
    name: spring-ai-llm-app

  datasource:
    url: jdbc:postgresql://localhost:5433/postgres
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    hibernate:
      ddl-auto: update
    show-sql: true

spring.ai:
  chat:
    client:
      observations:
        log-prompt: true
    observations:
      log-prompt: true
      log-completion: true
  openai:
    api-key: ${OPENAI_API_KEY}
    model: gpt-4.1-nano

# Management and Tracing Configuration
management:
  tracing:
    enabled: true
  logging:
    export:
      enabled: true
  observations:
    annotations:
      enabled: true


# OpenTelemetry Configuration for LangWatch
# Set these environment variables:
# OTEL_EXPORTER_OTLP_ENDPOINT=https://app.langwatch.ai/api/otel
# OTEL_EXPORTER_OTLP_HEADERS=Authorization=Bearer YOUR_LANGWATCH_API_KEY
# The filtering will be applied automatically when the endpoint is set

# SpringDoc OpenAPI properties
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
    try-it-out-enabled: true
    filter: true

otel:
  java:
    global-autoconfigure:
      enabled: true
  traces:
    exporter: otlp
    sampler:
      ratio: 1.0
  metrics.exporter: none
  logs.exporter: otlp