spring.application.name=spring-ai-llm-app
spring.ai.openai.api-key=${OPENAI_API_KEY}
spring.ai.openai.model=gpt-4.1-nano

# Spring AI Chat Observations for Tracing
spring.ai.chat.observations.log-prompt=true
spring.ai.chat.observations.log-completion=true

spring.datasource.url=jdbc:postgresql://localhost:5433/postgres
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Management and Tracing Configuration
management.tracing.sampling.probability=1.0
management.observations.annotations.enabled=true

# OpenTelemetry Configuration for LangWatch
# Set these environment variables:
# OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=https://app.langwatch.ai/api/otel/v1/traces
# OTEL_EXPORTER_OTLP_HEADERS=Authorization=Bearer YOUR_LANGWATCH_API_KEY
# The filtering will be applied automatically when the endpoint is set

# SpringDoc OpenAPI properties
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.tryItOutEnabled=true
springdoc.swagger-ui.filter=true